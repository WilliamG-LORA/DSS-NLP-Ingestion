# This initialises the redis work queue
--- # NOTE: k8s-wait-for permission 
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-wait-for
rules:
  - apiGroups: ["core"]
    resources: ["services","pods"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default
subjects:
  - kind: ServiceAccount
    name: default
roleRef:
  kind: Role
  name: k8s-wait-for
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: gc-workqueue
spec:
  schedule: "* * * * *" # Run at every minute
  jobTemplate:
    spec:
      template:
        spec:
          initContainers: # NOTE: Wait for work queue services is completed
          - name: wait-redis
            image: groundnuty/k8s-wait-for:latest
            imagePullPolicy: Always
            command: ["kubectl", "wait", "--for=condition=ready", "pod/redis-master"]
          containers:
          - name: gc-workqueue
            image: nlp-ingestion-worker
            args: [ 'garbage_collector.py' ]
            volumeMounts:
              - name: configs
                mountPath: res/configs/
                readOnly: true
          volumes:
            - name: configs
              configMap:
                name: configs
                items:
                - key: setup-configs
                  path: setup_configs.yaml
          restartPolicy: OnFailure